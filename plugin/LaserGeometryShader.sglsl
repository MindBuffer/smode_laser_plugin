/* -------------------------------------- . ------------------------------------ .
| Filename : LaserGeometryShader.sglsl      | Generate Laser data                |
| Author   : Francis Maes                   | geometry shader base class         |
| Started  : 16/04/2020 14:23               |                                    |
` --------------------------------------- . ----------------------------------- */

#include "VertexAttributes.sglsl"
#include "LaserPoint.sglsl"
#include "GeometryMask.sglsl"

struct LaserGeometryShader
{
  GeometryMask mask;
  float maskThreshold;
  int weight;

  void emitLaserPoint(const in VertexAttributes vertex, int w)
  {
    LaserPoint res;
    res.position = homogeneousTransform(globals.modelViewProjectionWindow, vertex.position);
    res.texCoord = homogeneousTransform(globals.modelViewProjectionWindow, vertex.position).xy;
    res.color = makeLinearColor(vertex.color.rgb) * vertex.color.a;
    res.weight = w;
    emitVertex(res);
  }
  
  vec3 makeLinearColor(vec3 c)
    {return convertGamma(c, 1.0, globals.renderingGamma);}

  int computeWeight(float maskValue)
  {
    if (maskValue < maskThreshold)
      return 0;
    else if (weight == 1)
      return 1;
    else
      return max(1, min(weight, int(weight * (maskValue - maskThreshold) / (1 - maskThreshold) + 0.5)));
  }

  //bool sampleBoolean(const in VertexAttributes vertex, float prob)
  //  {return prob >= 1.0 || positionSimpleNoise(vertex.position.xy + vertex.color.rg) <= prob;}

  float evaluateMask(const in VertexAttributes vertex)
    {return mask.compute(vertex).x;}
};
